# Steezy Alerts:
rxxa oect ekfz boct


# quake-detector-svc

dotnet new worker -n quake-detector-svc
cd quake-detector-svc

dotnet add package Confluent.Kafka
dotnet add package MailKit


# rebuild
dotnet clean
dotnet build -c Release





#alert-dispatcher-svc

dotnet new worker -n alert-dispatcher-svc
cd alert-dispatcher-svc
dotnet add package Confluent.Kafka
dotnet add package MailKit
dotnet clean
dotnet build -c Release





 ┌────────────────────┐
 │      producer       │
 │ Scrapes USGS Quakes │
 └────────────────────┘
           │
           ▼
 ┌────────────────────┐
 │     Kafka Topic     │
 │     earthquakes     │
 └────────────────────┘
           │
           ▼
 ┌────────────────────┐
 │      consumer       │
 │ Save to PostgreSQL  │
 └────────────────────┘

 (In Parallel)

 ┌────────────────────┐
 │   quake-detector    │
 │ Filter significant  │
 │  quakes (M ≥ 3.0)   │
 └────────────────────┘
           │
           ▼
 ┌────────────────────┐
 │     Kafka Topic     │
 │     quake-alerts    │
 └────────────────────┘
           │
           ▼
 ┌────────────────────────┐
 │   alert-dispatcher-svc  │
 │ Send fancy HTML emails  │
 └────────────────────────┘



🛡️ Improvements for Enterprise-Level Robustness

Idea	Why It’s Good	How
Dead Letter Queue (DLQ)	Catch bad messages (broken JSON, missing fields, etc) instead of crashing services	Add a quake-alerts-dlq topic, catch parsing failures

Retry Topic	If email send fails (SMTP issues), retry later	Publish failed emails to quake-alerts-retry

Database for Alerts	Persist sent alerts for history and avoid duplicates after pod restart	Add a tiny PostgreSQL table like sent_alerts (quake_id)

Monitoring	Metrics like emails sent, alerts failed, etc	Use Prometheus + Grafana later

KEDA Autoscaling	Scale services based on Kafka lag!	Later if you want! Super cool

Structured Logging	Log to JSON for better log ingestion	Use Serilog in .NET


alert-dispatcher-svc
quake-detector-svc


# offsets
kubectl exec -it kafka-5cf5bf7755-kpljt -- bash
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group alert-dispatcher-svc-group --reset-offsets --all-topics --to-earliest --execute

# Check KAfka format
kubectl exec -it deployment/kafka -- kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic quake-alerts --from-beginning --max-messages 1



# Delete the topic
kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic quake-alerts

# Recreate a clean topic
kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --create --topic quake-alerts --partitions 1 --replication-factor 1



# FULL RESET

kubectl scale deployment/consumer --replicas=0
kubectl scale deployment/quake-detector-svc --replicas=0
kubectl scale deployment/alert-dispatcher-svc --replicas=0

kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic earthquakes
kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic quake-alerts

kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --create --topic earthquakes --partitions 1 --replication-factor 1
kubectl exec -it deployment/kafka -- kafka-topics.sh --bootstrap-server localhost:9092 --create --topic quake-alerts --partitions 1 --replication-factor 1

